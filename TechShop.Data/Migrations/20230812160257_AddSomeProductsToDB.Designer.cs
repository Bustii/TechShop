// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechShop.Data;

#nullable disable

namespace TechShop.Data.Migrations
{
    [DbContext(typeof(TechShopDbContext))]
    [Migration("20230812160257_AddSomeProductsToDB")]
    partial class AddSomeProductsToDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TechShop.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TechShop.Data.Models.ApplicationUserProduct", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProducts");
                });

            modelBuilder.Entity("TechShop.Data.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("TechShop.Data.Models.CartProduct", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("TechShop.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Desktop Computers"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Gaming Computers"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Monitors"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Keyboards"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Mouses"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Gaming Peripherals"
                        });
                });

            modelBuilder.Entity("TechShop.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TechShop.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 12, 16, 2, 56, 846, DateTimeKind.Utc).AddTicks(4727));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastEdit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5495),
                            Description = "Intel Core i7-13700F\r\nNVIDIA GeForce RTX 4070 Ti\r\n32GB DDR5\r\nот 1TB SSD NVMe до 4TB (SSD NVMe и HDD)",
                            ImageUrl = "https://laptop.bg/system/images/413287/normal/Predator_Orion_7000_PO5_650.png",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5531),
                            Model = "Acer",
                            Name = "Predator Orion 5000 PO5-650",
                            Price = 2300.00m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5543),
                            Description = "Intel Core i9-13980HX\r\nNVIDIA GeForce RTX 4090\r\n64GB DDR5\r\nот 2TB SSD NVMe до 4TB SSD NVMe",
                            ImageUrl = "https://laptop.bg/system/images/378257/normal/msi_titan_gt77_hx_13vi_9S717Q211055.png",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5544),
                            Model = "MSI",
                            Name = "Titan GT77 HX 13VI",
                            Price = 2800.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5547),
                            Description = "AMD Ryzen™ 7 4800H\r\nNVIDIA GeForce RTX 3050\r\nот 16GB до 64GB DDR4\r\nот 512GB SSD NVMe до 2512GB SSD NVMe",
                            ImageUrl = "https://laptop.bg/system/images/293133/normal/asus_rog_strix_g15_g513ichn004.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5549),
                            Model = "Asus",
                            Name = "ROG Strix G15 G513IC-HN004",
                            Price = 1900.00m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5551),
                            Description = "от Intel Core i9-13900K\r\nFull Water Loop\r\nGeForce RTX 4090\r\n64GB DDR5\r\nот 2TB Gen4 PCIe NVMe SSD",
                            ImageUrl = "https://laptop.bg/system/images/409277/normal/grigs_hyperion_by_alexma3x.png",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5553),
                            Model = "Asus",
                            Name = "ROG Hyperion",
                            Price = 5000.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5558),
                            Description = "от Intel Core i5-12400F\nот Radeon RX 6650 XT до RTX 4070 Ti\nот 16GB DDR4\nот 1TB PCIe Gen3 NVMe SSD",
                            ImageUrl = "https://laptop.bg/system/images/415856/normal/grigs_arena_intel_gen12.png",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5560),
                            Model = "MSI",
                            Name = "Arena",
                            Price = 1999.00m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5562),
                            Description = "от AMD Ryzen 5 5600\nот Radeon RX 6650 XT до RTX 4070\nот 16GB DDR4\nот 1TB Gen3 PCIe NVMe SSD",
                            ImageUrl = "https://laptop.bg/system/images/317025/normal/grigs_twister_white_amd.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5564),
                            Model = "Asus",
                            Name = "Twister White",
                            Price = 2039.00m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5566),
                            Description = "AMD Ryzen™ 9 7945HX\nNVIDIA GeForce RTX 4080\nот 32GB до 64GB DDR5\nот 1TB SSD NVMe до 3TB SSD NVMe",
                            ImageUrl = "https://laptop.bg/system/images/395279/normal/asus_rog_zephyrus_duo_16_gx650pznm014x.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5568),
                            Model = "Asus",
                            Name = "ROG Zephyrus Duo 16",
                            Price = 8499.00m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5596),
                            Description = "от AMD Ryzen 7 7800X3D\nот GeForce RTX 4070 Ti до RTX 4090\nот 32GB DDR5\nот 1TB Gen4 PCIe NVMe SSD",
                            ImageUrl = "https://laptop.bg/system/images/410555/normal/grigs_athena_icue_amd_zen4.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5598),
                            Model = "Acer",
                            Name = "Athena iCue",
                            Price = 5639.00m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5603),
                            Description = "от AMD Ryzen 7 5800X3D\nот GeForce RTX 4070 Ti до RTX 4090\nот 32GB DDR4\nот 1TB Gen4 PCIe NVMe SSD",
                            ImageUrl = "https://laptop.bg/system/images/347415/normal/grigs_apolo_icue_amd.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5604),
                            Model = "Asus",
                            Name = "Apollo iCue",
                            Price = 4889.00m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5607),
                            Description = "31.5\" OLED\r\n3840x2160 (4K UHD)\r\n99% DCI-P3\r\n99% Adobe RGB\r\nUSB Type-C",
                            ImageUrl = "https://laptop.bg/system/images/309623/normal/lg_32ep950b.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5608),
                            Model = "LG",
                            Name = "32EP950-B",
                            Price = 7559.00m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5611),
                            Description = "27” IPS\r\n3840x2160 (4K Ultra HD)\r\nUSB Type-C\r\nHDR10\r\nCalman Ready",
                            ImageUrl = "https://laptop.bg/system/images/354936/normal/asus_proart_pa27ucxk.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5612),
                            Model = "Asus",
                            Name = "ProArt PA27UCX-K",
                            Price = 5949.00m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5615),
                            Description = "55\" VA 165Hz Извит\r\n3840x2160 (4K Ultra HD)\r\nAMD FreeSync™ Premium Pro\r\nQuantum Matrix технология\r\nTizen™",
                            ImageUrl = "https://laptop.bg/system/images/413122/normal/samsung_odyssey_ark_ls55bg970nuxen.png",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5616),
                            Model = "Samsung",
                            Name = "Odysseu Ark LS55BG97ONUXEN",
                            Price = 3999.00m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 5,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5619),
                            Description = "безжична гейминг клавиатура\r\nултра тънък дизайн\r\nнископрофилни GL Clicky суичове\r\nрегулируема LIGHTSYNC RGB подсветка",
                            ImageUrl = "https://laptop.bg/system/images/334363/normal/logitech_g915_tkl_lightspeed_wireless_rgb_mechanical_gaming_keyboard_gl_clicky_carbon_us_intl_intnl.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5620),
                            Model = "Logitech",
                            Name = "G915 TKL",
                            Price = 459.00m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5623),
                            Description = "геймърска клавиатура\r\nRazer™ HyperSpeed Wireless (2.4 Ghz)/ Bluetooth/Type-C свързаност\r\nN-key roll over\r\nбордова памет и съхранение в облака - до 5 профила",
                            ImageUrl = "https://laptop.bg/system/images/393664/normal/RZ0304370100R3M1.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5624),
                            Model = "Razer",
                            Name = "DeathStalker V2 Pro tenkeyless",
                            Price = 389.00m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5627),
                            Description = "механични Cherry MX суитчове\r\nRGB подсветка\r\nпрограмируеми клавиши\r\nаудио контрол",
                            ImageUrl = "https://laptop.bg/system/images/231437/normal/545BBCL.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5628),
                            Model = "Alienware",
                            Name = "AW510K",
                            Price = 364.00m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 6,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5631),
                            Description = "Razer™ HyperSpeed Wireless\r\n3 сменяеми странични плочи\r\nдо 19+1 програмируеми бутона\r\nживот на батерията до 150 часа",
                            ImageUrl = "https://laptop.bg/system/images/308636/normal/RZ0103420100R3G1.png",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5632),
                            Model = "Razer",
                            Name = "Naga Pro",
                            Price = 329.00m
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 6,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5635),
                            Description = "Hero сензор с 25 600 DPI (след firmware update в G HUB)\r\n1ms LIGHTSPEED безжична технология\r\nсъвместимост с POWERPLAY\r\n114гр. тегло\r\nвъзможност за Hyper-scrolling",
                            ImageUrl = "https://laptop.bg/system/images/247224/normal/910005567.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5636),
                            Model = "Logitech",
                            Name = "G502 Lightspeed",
                            Price = 309.00m
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5639),
                            Description = "жичен /безжичен режим\r\n8 програмируеми бутона\r\nAlienFX осветяване подсветка\r\nдо 420 часа живот на батерията",
                            ImageUrl = "https://laptop.bg/system/images/393464/normal/545BBDN14.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5641),
                            Model = "Alienware",
                            Name = "Tri-Mode Wireless",
                            Price = 306.00m
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 7,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5645),
                            Description = "гумена основа\r\nподсветка\r\nсинхронизация на цветовете\r\nв черно",
                            ImageUrl = "https://laptop.bg/system/images/206283/normal/RZ0202500300R3M1.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5647),
                            Model = "Razer",
                            Name = "Goliathus Extended Chroma",
                            Price = 149.00m
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 7,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5650),
                            Description = "уеб камера Full HD 1080p\r\nкорекция на светлината\r\nавтоматично кадриране\r\nрежим на показване",
                            ImageUrl = "https://laptop.bg/system/images/373676/normal/960001422.png",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5651),
                            Model = "Logitech",
                            Name = "Brio 500",
                            Price = 259.00m
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 7,
                            CreatedOn = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5653),
                            Description = "USB Type-C\r\nDisplayPort\r\nHDMI\r\nRJ-45",
                            ImageUrl = "https://laptop.bg/system/images/331442/normal/lenovo_thinkpad_hybrid_usbc_with_usba_dock.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            LastEdit = new DateTime(2023, 8, 12, 19, 2, 56, 846, DateTimeKind.Local).AddTicks(5655),
                            Model = "Lenovo",
                            Name = "ThinkPad Hybrid",
                            Price = 589.00m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TechShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TechShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TechShop.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechShop.Data.Models.ApplicationUserProduct", b =>
                {
                    b.HasOne("TechShop.Data.Models.Product", "Product")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechShop.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechShop.Data.Models.Cart", b =>
                {
                    b.HasOne("TechShop.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechShop.Data.Models.CartProduct", b =>
                {
                    b.HasOne("TechShop.Data.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechShop.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechShop.Data.Models.Order", b =>
                {
                    b.HasOne("TechShop.Data.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechShop.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechShop.Data.Models.Product", b =>
                {
                    b.HasOne("TechShop.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechShop.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TechShop.Data.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("TechShop.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TechShop.Data.Models.Product", b =>
                {
                    b.Navigation("UserProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
